<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.itwill.billycar.mapper.ReviewMapper">
	<insert id="insertReview">
		 INSERT INTO review (
	        review_id,
	        review_subject,
	        review_content,
	        review_score,
	        review_heart,
	        review_reg_date,
	        car_number,
	        review_idx
   		 ) VALUES (
	        #{review_id},
	        #{review_subject},
	        #{review_content},
	        #{review_score},
	        0,
	        NOW(),
	        #{car_number},
	        #{review_idx}
   		 )
	</insert>
	<select id="selectReviewList" resultType="hashmap">
		SELECT 
		    c.*, 
		    r.*, 
		    h.member_id AS member_id
		FROM car c
		JOIN review r ON c.car_number = r.car_number
		LEFT JOIN heart h ON r.review_idx = h.review_idx AND h.member_id = #{member_id}
    	<if test="option.equals('latest')">
    		order by r.review_reg_date desc
    	</if>
    	<if test="option.equals('old')">
    		order by r.review_reg_date asc
    	</if>
    	<if test="option.equals('rating')">
    		order by r.review_score desc
    	</if>
    	LIMIT #{startRow},#{listLimit}
	</select>
	
	<select id="selectReviewAvg">
		SELECT IFNULL(AVG(review_score), 0) AS avg_score FROM review;
	</select>
	
	<select id="selectAllReview">
		select count(*) from review;
	</select>
	
	<select id="selectReview" resultType="com.itwill.billycar.vo.ReviewVO">
		SELECT review_id
		     , review_content 
		     , review_score 
		  FROM review
		 WHERE car_number = #{carNumber}
		 LIMIT 3;
	</select>
	<update id="updateReviewHeart">
		update review
		set review_heart = review_heart + #{count}
		where review_idx = #{review_idx}
	</update>
	
	<select id="selectHeart">
		select *
		from heart
		where member_id = #{member_id} AND review_idx = #{review_idx}
	</select>
	<insert id="insertHeart">
		insert into heart values (#{review_idx}, #{member_id})
	</insert>
	<delete id="deleteHeart">
		delete from heart where review_idx = #{review_idx} and member_id = #{member_id}
	</delete>
	
	<select id="selectheartStatus" resultType="com.itwill.billycar.vo.HeartVO">
		select * from heart where member_id = #{member_id} and review_idx = #{review_idx};
	</select>
	
	<select id="heartList" resultType="com.itwill.billycar.vo.HeartVO">
		select * from heart;
	</select>
	
	<select id="selectPopularCar" resultType="hashmap">
		SELECT 
		    A.car_number,
		    A.car_img,
		    A.review_score,
		    A.review_heart,
		    A.car_countReserve,
		    cm_model.name as car_model_name,
		    cm_fuel.name as car_fuel_name,
		    cm_type.name as car_type_name
		FROM (
		    SELECT
		        c.car_number,
		        c.car_img,    
		        ROUND(AVG(r.review_score), 2) AS review_score,
		        COALESCE(SUM(r.review_heart), 0) AS review_heart,
		        c.car_countReserve,
		        c.car_model,
		        c.car_fuel,
		        c.car_type
		    FROM car c
		    LEFT JOIN review r 
		        ON c.car_number = r.car_number
		    GROUP BY 
		        c.car_number, 
		        c.car_img, 
		        c.car_countReserve
		    ORDER BY 
		        (AVG(r.review_score) * 0.5) + 
		        (COALESCE(SUM(r.review_heart), 0) * 0.3) + 
		        (c.car_countReserve * 0.2) DESC
		) A
		LEFT JOIN Common cm_model 
		    ON A.car_model = cm_model.code
		LEFT JOIN Common cm_fuel 
		    ON A.car_fuel = cm_fuel.code
		LEFT JOIN Common cm_type 
		    ON A.car_type = cm_type.code
		LIMIT 3;
	</select>
</mapper>















